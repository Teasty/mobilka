//
//  MapViewController.swift
//  mobilka
//
//  Created by Андрей Лихачев on 03.12.2019.
//  Copyright (c) 2019 Андрей Лихачев. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol MapDisplayLogic: class
{
    func displaySomething(cities: [Map.Models.City])
}

class MapViewController: UIViewController, MapDisplayLogic
{
    var interactor: MapBusinessLogic?
    var router: (NSObjectProtocol & MapRoutingLogic & MapDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MapInteractor()
        let presenter = MapPresenter()
        let router = MapRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        let Dmitrov = CLLocationCoordinate2D(latitude: 56.344157, longitude: 37.520015)
        let regionRadius = 100000.0
        let region = MKCoordinateRegion(center: Dmitrov, latitudinalMeters: regionRadius, longitudinalMeters: regionRadius)
        MapView.setRegion(region, animated: true)
        
        getCities(map: MapView)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var MapView: MKMapView!
    
    
    @IBAction func menuButtonTapped(_ sender: Any) {
        guard let menuVC = storyboard?.instantiateViewController(withIdentifier: "Menu") else {return}
        menuVC.modalPresentationStyle = .overCurrentContext
        menuVC.transitioningDelegate = self
        present(menuVC, animated: true)
    }
    let transition = SlideTransition()
    
    func getCities(map: MKMapView)
    {
        let request = Map.Coordinates.initWithMapView(map: map)
        interactor?.getCities(request: request)
    }
    
    func displaySomething(cities: [Map.Models.City])
    {
        createAnnotations(cities: cities)
    }
    
    
    func imageWith(temp: String, image: String, name: String) -> UIImage? {
        
        let View = UIView(frame: CGRect(origin: CGPoint(x: 0, y: 0), size: CGSize(width: 60, height: 80)))
        View.backgroundColor = #colorLiteral(red: 0.01680417731, green: 0.1983509958, blue: 1, alpha: 0.4958736796)
        
        let imageView = UIImageView(frame: CGRect(origin: CGPoint(x: 0, y: 10), size: CGSize(width: 60, height: 60)))
        imageView.image = UIImage(named: image)
        
        let nameLabel = UILabel(frame: CGRect(origin: CGPoint(x: 0, y: 0), size: CGSize(width: 60, height: 20)))
        nameLabel.textAlignment = .center
        nameLabel.textColor = .white
        nameLabel.font = UIFont.boldSystemFont(ofSize: 18)
        nameLabel.text = name
        
        let tempLabel = UILabel(frame: CGRect(origin: CGPoint(x: 0, y: 60), size: CGSize(width: 60, height: 20)))
        tempLabel.textAlignment = .center
        tempLabel.textColor = .white
        tempLabel.font = UIFont.boldSystemFont(ofSize: 16)
        tempLabel.text = temp
        
        
        View.addSubview(nameLabel)
        nameLabel.topAnchor.constraint(equalTo: View.topAnchor)
        View.addSubview(tempLabel)
        tempLabel.bottomAnchor.constraint(equalTo: View.bottomAnchor).isActive = true
        tempLabel.rightAnchor.constraint(equalTo: View.rightAnchor).isActive = true
        tempLabel.leftAnchor.constraint(equalTo: View.leftAnchor).isActive = true
        tempLabel.topAnchor.constraint(equalTo: View.topAnchor, constant: 30).isActive = true
        View.addSubview(imageView)
        imageView.bottomAnchor.constraint(equalTo: View.bottomAnchor).isActive = true
        
        UIGraphicsBeginImageContextWithOptions(View.frame.size, false, UIScreen.main.scale)
        View.layer.render(in: UIGraphicsGetCurrentContext()!)
        let newImage: UIImage = UIGraphicsGetImageFromCurrentImageContext()!
        
        return newImage
    }
    
    func createAnnotations(cities: [Map.Models.City]){
        for city in cities{
            if !MapView.annotations.contains(where: {$0.coordinate.latitude == city.lat && $0.coordinate.longitude == city.lon}){
                let annotation = CustomAnnotation()
                annotation.title = String(city.temp) + "°C"
                annotation.coordinate = CLLocationCoordinate2D(latitude: city.lat, longitude: city.lon)
                annotation.image = city.icon
                annotation.temp = String(city.temp) + "°C"
                annotation.name = city.name
                
                MapView.addAnnotation(annotation)

            }
        }
    }
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        let reuseIdentifier = "pin"
        var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: reuseIdentifier)

        if annotationView == nil {
            annotationView = MKAnnotationView(annotation: annotation, reuseIdentifier: reuseIdentifier)
            annotationView?.canShowCallout = true
        } else {
            annotationView?.annotation = annotation
        }
        annotationView?.displayPriority = .defaultLow
        let customPointAnnotation = annotation as! CustomAnnotation
        annotationView!.image = imageWith(temp: customPointAnnotation.temp, image: customPointAnnotation.image, name: customPointAnnotation.name)
        return annotationView
    }
}

extension MapViewController: MKMapViewDelegate{
    func mapView(_ mapView: MKMapView, regionDidChangeAnimated animated: Bool) {
        getCities(map: mapView)
    }
    
    func mapView(_ mapView: MKMapView, regionWillChangeAnimated animated: Bool) {
        getCities(map: mapView)
    }
}

extension MapViewController: UIViewControllerTransitioningDelegate {
    func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning? {
        transition.isPresenting = true
        return transition
    }
    
    func animationController(forDismissed dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {
        transition.isPresenting = false
        return transition
    }
}


class CustomAnnotation: MKPointAnnotation, MKMapViewDelegate{
    var image: String!
    var temp: String!
    var name: String!
}
